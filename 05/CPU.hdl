// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    //Instruction[0] = J3 if < 0
    //Instruction[1] = J2 if = 0
    //Instruction[2] = J1 if > 0

    //Instruction[3] = d3 write to memory
    //Instruction[4] = d2 load to D Register
    //Instruction[5] = d1 load to A Register

    //Instruction[6] = c6 no
    //Instruction[7] = c5 f
    //Instruction[8] = c4 ny
    //Instruction[9] = c5 zy
    //Instruction[10] = c3 nx
    //Instruction[11] = c2 zx

    //instruction[12] = a = Used to Select A Register or M input
    //instruction[15] = opcode 1= C Instruction, 0 = A Instruction

    PARTS:

    // A or C Instruction?
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    //Is C Instruction and destined for Register A?
    And(a=isCInstruction, b=instruction[5], out=aluToA);
    Mux16(a=instruction, b=aluOut, sel=aluToA, out=aRegIn);

    // load A or C Instruction to A Register
    Or(a=isAInstruction, b=aluToA, out=loadA);
    ARegister(in=aRegIn, load=loadA, out=aOut);

    // select A or M based on a-bit in instruction[12]
    Mux16(a=aOut, b=inM, sel=instruction[12], out=amOut);

    //Is C Instruction destined for Register C?
    And(a=isCInstruction, b=instruction[4], out=loadD);
    // load the D register from ALU Output
    DRegister(in=aluOut, load=loadD, out=dOut);

    ALU(x=dOut, y=amOut,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, zr=outZr, ng=outNg);

  // Write Memory outputs
  Or16(a=false, b=aOut, out[0..14]=addressM);
  Or16(a=false, b=aluOut, out=outM);
  And(a=isCInstruction, b=instruction[3], out=writeM);

  //Was the ALU Output Positive?
  Or(a=outZr, b=outNg, out=aluOutZeroOrNegative);
  Not(in=aluOutZeroOrNegative, out=positive);

  //JEQ
  And(a=instruction[1], b=outZr, out=outJEQ);
  //JLT
  And(a=instruction[2], b=outNg, out=outJLT);
  //JGT
  And(a=instruction[0], b=positive, out=outJGT);
  //JLE
  Or(a=outJLT, b=outJEQ, out=outJLE);
  //JMP
  Or(a=outJLE, b=outJGT, out=outJMP);

  // JUMP if C Instruction
  And(a=isCInstruction, b=outJMP, out=pcLoad);

  //INC
  Not(in=pcLoad, out=inc);

  //Set PC according to reset and value of A Register Output
  PC(in=aOut, load=pcLoad, inc=inc, reset=reset, out[0..14]=pc);
}
