// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Set contents of A Register,
    //if (instruction[0]==0) out=instruction else out=outM
    Mux16(a=instruction, b=outM, sel=instruction[0] out=aMuxOut);
    //Set A Register to aMuxOut
    Register(in=aMuxOut, load=aMuxOut[11],
             out[1..15]=addressM, out=aRegisterOut);
    //Set D Register to outM
    Register(in=outM, load=outM[12], out=dRegisterOut);

    //Set ALU Inputs
    Mux16(a=aRegisterOut, b=inM, sel=inM[3], out=aluYInput);
    Alu(x=dRegisterOut, y=aluYInput,
        zx=dRegisterOut[4],nx=dRegisterOut[5],
        zy=dRegisterOut[6],ny=dRegisterOut[7],
        f=dRegisterOut[8], no=dRegisterOut[9],
        out=outM, outM[13]=writeM, zr=outZr, ng=outNg);

  //What do I do with zr and ng???

  //Set PC according to reset and value of A Register Output
}
